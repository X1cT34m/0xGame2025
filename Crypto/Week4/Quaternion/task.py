from Crypto.Util.number import *
from secret import flag


class Quaternion:
    def __init__(self, value=[0, 0, 0, 0]):
        if type(value) == str:
            self.value = [int(i[:-1]) if i[-1] in 'ijk' else int(i) for i in value.split(' + ')]
        elif type(value) == list:
            self.value = value
        else:
            raise ValueError("Invalid type for Quaternion initialization")

    def __str__(self):
        s = str(self.value[0])
        for k, i in enumerate(self.value[1:]):
            if i >= 0:
                s += ' + '
            s += str(i) + 'ijk'[k]
        return s

    def __add__(self, x: 'Quaternion'):
        return Quaternion([i + j for i, j in zip(self.value, x.value)])

    def __mul__(self, x):
        a = self.value[0] * x.value[0] - self.value[1] * x.value[1] - self.value[2] * x.value[2] - self.value[3] * x.value[3]
        b = self.value[0] * x.value[1] + self.value[1] * x.value[0] + self.value[2] * x.value[3] - self.value[3] * x.value[2]
        c = self.value[0] * x.value[2] - self.value[1] * x.value[3] + self.value[2] * x.value[0] + self.value[3] * x.value[1]
        d = self.value[0] * x.value[3] + self.value[1] * x.value[2] - self.value[2] * x.value[1] + self.value[3] * x.value[0]
        return Quaternion([a, b, c, d])

    def __mod__(self, x: 'Quaternion'):
        return Quaternion([i % x for i in self.value])

    def __pow__(self, x: 'Quaternion', n=None):
        tmp = Quaternion(self.value)
        a = Quaternion([1, 0, 0, 0])
        while x:
            if x & 1:
                a *= tmp
            tmp *= tmp
            if n:
                a %= n
                tmp %= n
            x >>= 1
        return a


p = getPrime(512)
a = 12279853477283008553357657492789763255038870106301916103237655771107240855639019740311384654049683518074767532668306533768786610265460170996795820601321909
b = 11210493117462584846695225251401309306620235323150317045189710917149538613051572049177523790232361862309737553875527265480632012163444954592595707353201593
c = 450430550110220511170706355346853127519361342092668926760254273216011478764445031538810577279916498307130264816119062480395788963919822889673835039577697
d = 3174124676656013174258111656715518261932447407587587373745001204373630194465607583875038303157271540416614763810219408013310091241179227844814818997567768
quaternion = Quaternion([a, b, c, d])
m = bytes_to_long(flag)
enc = pow(quaternion, m, p)
print(f"p = {p}")
print(f"public = \"{quaternion}\"")
print(f"enc = \"{enc}\"")

# p = 12539865613843105911233856888270676153770546095381527984724592359575546777767977150390387506665349509251937298897654702160935929421300160106185683395163421
# public = "12279853477283008553357657492789763255038870106301916103237655771107240855639019740311384654049683518074767532668306533768786610265460170996795820601321909 + 11210493117462584846695225251401309306620235323150317045189710917149538613051572049177523790232361862309737553875527265480632012163444954592595707353201593i + 450430550110220511170706355346853127519361342092668926760254273216011478764445031538810577279916498307130264816119062480395788963919822889673835039577697j + 3174124676656013174258111656715518261932447407587587373745001204373630194465607583875038303157271540416614763810219408013310091241179227844814818997567768k"
# enc = "2265462378761600430532145400101912094563084708128292610022357820427900202076518621271341061446425878932435592087810301613872104317791934633397153003692733 + 11782169557857342336271967041629416683561191223952219855027739818522859391187666351078682423218210372662669230179370323154138802086643543387102521811129172i + 10908162276945008648926361072155772044902584979394235365102141792914012158138256920012734972335441493996292123708617034711883958615075943172083534030307874j + 10540286960315438106114455060855856502156861387281507535140969278011407516259839611632861445654470081837664230792371993219647065751349771625197786828909473k"
